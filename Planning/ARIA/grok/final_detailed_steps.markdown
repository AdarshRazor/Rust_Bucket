# Detailed Steps to Build ARIA

Welcome to your journey of building ARIA, a personalized AI assistant! This guide is designed for beginners, breaking the project into phases with clear tasks. Each phase takes about 2 weeks, but feel free to adjust the timeline as you learn. Let’s get started!

## Phase 1: Basic Chatbot (Weeks 1-2)

**Goal**: Build a simple text-based chatbot that responds to basic commands.

**Tasks**:
1. **Set up your development environment**:
   - Download and install [Python 3.11](https://www.python.org/downloads/).
   - Open a terminal and create a virtual environment: `python -m venv aria_env`.
   - Activate it:
     - Linux/Mac: `source aria_env/bin/activate`
     - Windows: `aria_env\Scripts\activate`
   - Install Rasa: `pip install rasa`.

2. **Learn the basics of Rasa**:
   - Check out the [Rasa documentation](https://rasa.com/docs/rasa/) to understand intents (what the user wants), entities (details in commands), and stories (conversation flows).
   - Watch a beginner tutorial on YouTube, like a “Rasa for Beginners” video.

3. **Create a new Rasa project**:
   - In your terminal, run `rasa init` to set up a project folder with default files.
   - Look at `nlu.yml` (for training data), `stories.yml` (for conversation flows), and `domain.yml` (for responses).

4. **Define basic intents and responses**:
   - Edit `nlu.yml` to add intents:
     ```yaml
     - intent: greet
       examples: |
         - hello
         - hi
     - intent: set_reminder
       examples: |
         - remind me to call mom
         - set a reminder for tomorrow
     ```
   - Edit `domain.yml` to add responses:
     ```yaml
     responses:
       utter_greet:
         - text: "Hello! How can I help you today?"
       utter_set_reminder:
         - text: "Reminder set!"
     ```

5. **Write conversation stories**:
   - Edit `stories.yml` to define flows:
     ```yaml
     stories:
       - story: greet and set reminder
         steps:
           - intent: greet
           - action: utter_greet
           - intent: set_reminder
           - action: utter_set_reminder
     ```

6. **Train the Rasa model**:
   - Run `rasa train` in the terminal to train your chatbot.

7. **Test your chatbot**:
   - Run `rasa shell`, then type “hello” or “remind me to call mom” to see if it works.

---

## Phase 2: Data Collection (Weeks 3-4)

**Goal**: Collect data from an external source, starting with Twitter.

**Tasks**:
1. **Set up the Twitter API**:
   - Sign up for a [Twitter Developer account](https://developer.twitter.com/).
   - Create an app to get API keys (Bearer Token, API Key, etc.).
   - Install Tweepy: `pip install tweepy`.

2. **Fetch your tweets**:
   - Write a Python script:
     ```python
     import tweepy
     client = tweepy.Client(bearer_token='your-bearer-token-here')
     tweets = client.get_users_tweets(id='your-twitter-user-id', max_results=10)
     with open('tweets.txt', 'w') as file:
         for tweet in tweets.data:
             file.write(tweet.text + '\n')
     ```
   - Replace `'your-bearer-token-here'` and `'your-twitter-user-id'` with your credentials.

3. **Explore other data sources**:
   - Research how to access phone data (e.g., notifications via Android Debug Bridge), but focus on Twitter for now to keep it simple.

4. **Store data securely**:
   - Install the `cryptography` library: `pip install cryptography`.
   - Encrypt your data:
     ```python
     from cryptography.fernet import Fernet
     key = Fernet.generate_key()
     cipher = Fernet(key)
     with open('tweets.txt', 'rb') as file:
         data = file.read()
     encrypted_data = cipher.encrypt(data)
     with open('tweets_encrypted.txt', 'wb') as file:
         file.write(encrypted_data)
     ```

---

## Phase 3: Task Prioritization (Weeks 5-6)

**Goal**: Add a system to manage and prioritize tasks.

**Tasks**:
1. **Define a task structure**:
   - Decide what a task looks like: `{"description": "Call mom", "due_date": "2025-05-27", "priority": 5}`.

2. **Create a task list**:
   - Use a simple Python list for now:
     ```python
     tasks = []
     tasks.append({"description": "Call mom", "due_date": "2025-05-27", "priority": 5})
     ```

3. **Implement priority logic**:
   - Sort tasks by priority:
     ```python
     sorted_tasks = sorted(tasks, key=lambda x: x['priority'], reverse=True)
     for task in sorted_tasks:
         print(task['description'], task['priority'])
     ```

4. **Integrate with the chatbot**:
   - Add intents to `nlu.yml`:
     ```yaml
     - intent: add_task
       examples: |
         - add a task to call mom
     ```
   - Update `domain.yml` with responses and actions:
     ```yaml
     actions:
       - action_add_task
     responses:
       utter_task_added:
         - text: "Task added!"
     ```
   - Create a custom action in `actions.py` (generated by `rasa init`):
     ```python
     from rasa_sdk import Action
     class ActionAddTask(Action):
         def name(self):
             return "action_add_task"
         def run(self, dispatcher, tracker, domain):
             tasks.append({"description": tracker.latest_message['text'], "priority": 5})
             dispatcher.utter_message(response="utter_task_added")
             return []
     ```
   - Train and test again.

---

## Phase 4: Emotion Detection (Weeks 7-8)

**Goal**: Detect emotions from text inputs.

**Tasks**:
1. **Learn about sentiment analysis**:
   - Sentiment analysis identifies emotions (positive, negative, neutral) in text. Research it briefly online.

2. **Use a pre-trained model**:
   - Install Hugging Face’s Transformers: `pip install transformers`.
   - Test a sentiment model:
     ```python
     from transformers import pipeline
     classifier = pipeline('sentiment-analysis')
     result = classifier("I’m so happy today!")
     print(result)  # Example output: [{'label': 'POSITIVE', 'score': 0.99}]
     ```

3. **Integrate with Rasa**:
   - Add a custom action in `actions.py`:
     ```python
     from transformers import pipeline
     class ActionDetectEmotion(Action):
         def name(self):
             return "action_detect_emotion"
         def run(self, dispatcher, tracker, domain):
             classifier = pipeline('sentiment-analysis')
             text = tracker.latest_message['text']
             result = classifier(text)[0]
             if result['label'] == 'POSITIVE':
                 dispatcher.utter_message(text="Glad you're feeling good!")
             else:
                 dispatcher.utter_message(text="Hope things get better!")
             return []
     ```
   - Update `domain.yml` and `stories.yml` to trigger this action.

---

## Phase 5: Centralized Data Hub (Weeks 9-10)

**Goal**: Store all data in one place.

**Tasks**:
1. **Set up a database**:
   - Install [MongoDB](https://www.mongodb.com/try/download/community) and start it locally.
   - Install `pymongo`: `pip install pymongo`.

2. **Design data schemas**:
   - Store tweets and tasks in collections:
     ```python
     from pymongo import MongoClient
     client = MongoClient('mongodb://localhost:27017/')
     db = client['aria_db']
     tweets_collection = db['tweets']
     tasks_collection = db['tasks']
     ```

3. **Create APIs**:
   - Install Flask: `pip install flask`.
   - Write a simple API:
     ```python
     from flask import Flask, jsonify
     app = Flask(__name__)
     @app.route('/tasks', methods=['GET'])
     def get_tasks():
         tasks = list(tasks_collection.find())
         return jsonify(tasks)
     if __name__ == '__main__':
         app.run(debug=True)
     ```

---

## Phase 6: Decision Support (Weeks 11-12)

**Goal**: Offer suggestions based on data.

**Tasks**:
1. **Analyze data patterns**:
   - Check task frequency:
     ```python
     task_count = tasks_collection.count_documents({})
     print(f"You have {task_count} tasks.")
     ```

2. **Implement suggestion logic**:
   - Simple rule: if task count > 5, suggest a break:
     ```python
     if task_count > 5:
         print("Take a break!")
     ```

3. **Integrate with the chatbot**:
   - Add a suggestion action in `actions.py` and trigger it periodically.

---

## Phase 7: Optimization and Testing (Weeks 13-14)

**Goal**: Polish and test ARIA.

**Tasks**:
1. **Optimize performance**:
   - Research Rasa optimization tips (e.g., smaller models).

2. **Deploy locally**:
   - Install ARIA on a Raspberry Pi or your computer.

3. **Test in real life**:
   - Use ARIA daily and note what works or doesn’t.

4. **Iterate**:
   - Fix bugs and tweak features based on your notes.

---

## Tips for Success

- **Take your time**: Spend extra days on a task if needed.
- **Seek help**: Use Stack Overflow, Rasa forums, or ask an AI assistant.
- **Track progress**: Keep a journal of what you learn and do.
- **Have fun**: Building ARIA is a learning adventure!

By following these steps, you’ll create a functional AI assistant while gaining skills in programming and AI. Good luck!